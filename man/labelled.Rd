% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/labelled.R
\name{labelled}
\alias{as_factor.labelled}
\alias{is_na}
\alias{is_pseudo_na}
\alias{labelled}
\alias{normalise_na}
\alias{normalize_na}
\alias{zap_labels}
\title{Create a labelled vector.}
\usage{
labelled(x, labels = NULL, label_na = NULL, x_na = NULL)

\method{as_factor}{labelled}(x, levels = c("labels", "values"),
  ordered = FALSE, drop_na = TRUE, ...)

zap_labels(x)

is_pseudo_na(x)

is_na(x)

normalise_na(x)

normalize_na(x)
}
\arguments{
\item{x}{A vector to label. Must be either numeric (integer or double) or
character.}

\item{labels}{A named vector. The vector should be the same type as
x. Unlike factors, labels don't need to be exhaustive: only a fraction
of the values might be labelled.}

\item{label_na}{Optionally, a logical vector that should be as long as
\code{labels} and indicate which labels correspond to
pseudo-missing values.}

\item{x_na}{Optionally, a logical vector that should be as long
as \code{x} and indicate which values are pseudo-missing. This
missingness pattern can be broader than the one implied by
\code{label_na}. An error is issued when the patterns are not
consistent with each other.}

\item{levels}{When coercing a labelled character vector to a factor, you
can choose whether to use the labels or the values as the factor levels.}

\item{ordered}{If \code{TRUE} for ordinal factors, \code{FALSE} (the default)
for nominal factors.}

\item{drop_na}{If \code{TRUE}, the default, all types are missing value are
converted into \code{NA}. If \code{FALSE}, missing values will be left as
their original codes.}

\item{...}{Ignored}
}
\description{
A labelled vector is a common data structure in other statistical
environments. This class makes it possible to import such labelled vectors
in to without loss of fidelity. This class provides few methods, as I
expect you'll coerce to a standard R class (e.g. a \code{\link{factor}})
soon after importing.
}
\examples{
s1 <- labelled(c("M", "M", "F"), c(Male = "M", Female = "F"))
s2 <- labelled(c(1, 1, 2), c(Male = 1, Female = 2))

# Unfortunately it's not possible to make as.factor work for labelled objects
# so instead use as_factor. This works for all types of labelled vectors.
as_factor(s1)
as_factor(s1, labels = "values")
as_factor(s2)

# Other statistical software supports pseudo-missing values in
# addition to regular NAs. You can specify which labels define
# pseudo-missing values with a logical vector.
s3 <- labelled(
  c("M", "M", "F", "X", "N/A"),
  labels = c(Male = "M", Female = "F", Refused = "X", "Not applicable" = "N/A"),
  label_na = c(FALSE, FALSE, TRUE, TRUE)
)
s3
as_factor(s3)

# Alternatively, you can specify missingness with `x_na`
s4 <- labelled(
  c("M", "M", "F", "X", "N/A"),
  x_na = c(FALSE, FALSE, FALSE, TRUE, TRUE)
)
s4

# When you supply both, it is possible to declare values not
# mentioned in `labels` as missing. In this case make sure the
# patterns are consistent or labelled() will fail
s5 <- labelled(
  c("Z", "M", "M", "F", "X", "N/A"),
  labels = c(Male = "M", Female = "F", Refused = "X", "Not applicable" = "N/A"),
  label_na = c(FALSE, FALSE, TRUE, TRUE),
  x_na = c(TRUE, FALSE, FALSE, FALSE, TRUE, TRUE)
)
s5

# If you replace a value with a labelled pseudo-missing, the
# missingness information will be preserved correctly.
s5[2] <- "X"
is_pseudo_na(s5)

# When the pseudo-missing is not labelled, use bare_na(). See
# documentation of that function:
s5[3] <- bare_na("Z")
is_pseudo_na(s5)

# As seen in the previous example, you can check whether values are
# pseudo-missing using is_pseudo_na(). In addition, is_na() returns
# TRUE for both pseudo-missing and system-missing values:
s5[3] <- NA
is_na(s5)

# Often when you have a partially labelled numeric vector, labelled values
# are special types of missing. Use XXX to replace labels with missing
# values
x <- labelled(c(1, 2, 1, 2, 10, 9), c(Unknown = 9, Refused = 10))
zap_labels(x)
}
\seealso{
\code{\link{bare_na}()}
}

