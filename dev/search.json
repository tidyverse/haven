[{"path":[]},{"path":"https://haven.tidyverse.org/dev/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://haven.tidyverse.org/dev/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://haven.tidyverse.org/dev/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://haven.tidyverse.org/dev/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://haven.tidyverse.org/dev/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement codeofconduct@posit.co. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://haven.tidyverse.org/dev/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://haven.tidyverse.org/dev/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://haven.tidyverse.org/dev/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://haven.tidyverse.org/dev/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://haven.tidyverse.org/dev/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://haven.tidyverse.org/dev/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://haven.tidyverse.org/dev/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to haven","title":"Contributing to haven","text":"outlines propose change haven. detailed info contributing , tidyverse packages, please see development contributing guide.","code":""},{"path":"https://haven.tidyverse.org/dev/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to haven","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://haven.tidyverse.org/dev/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to haven","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://haven.tidyverse.org/dev/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to haven","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"batpigandme/haven\", fork = TRUE). Install development dependences devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://haven.tidyverse.org/dev/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to haven","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://haven.tidyverse.org/dev/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to haven","text":"Please note haven project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://haven.tidyverse.org/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 haven authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://haven.tidyverse.org/dev/SUPPORT.html","id":null,"dir":"","previous_headings":"","what":"Getting help with haven","title":"Getting help with haven","text":"Thanks using haven! filing issue, places explore pieces put together make process smooth possible.","code":""},{"path":"https://haven.tidyverse.org/dev/SUPPORT.html","id":"make-a-reprex","dir":"","previous_headings":"","what":"Make a reprex","title":"Getting help with haven","text":"Start making minimal reproducible example using reprex package. haven’t heard used reprex , ’re treat! Seriously, reprex make R-question-asking endeavors easier (pretty insane ROI five ten minutes ’ll take learn ’s ). additional reprex pointers, check Get help! section tidyverse site.","code":""},{"path":"https://haven.tidyverse.org/dev/SUPPORT.html","id":"where-to-ask","dir":"","previous_headings":"","what":"Where to ask?","title":"Getting help with haven","text":"Armed reprex, next step figure ask. ’s question: start community.rstudio.com, /StackOverflow. people answer questions. ’s bug: ’re right place, file issue. ’re sure: let community help figure ! problem bug feature request, can easily return report . opening new issue, sure search issues pull requests make sure bug hasn’t reported /already fixed development version. default, search pre-populated :issue :open. can edit qualifiers (e.g. :pr, :closed) needed. example, ’d simply remove :open search issues repo, open closed.","code":""},{"path":"https://haven.tidyverse.org/dev/SUPPORT.html","id":"what-happens-next","dir":"","previous_headings":"","what":"What happens next?","title":"Getting help with haven","text":"efficient possible, development tidyverse packages tends bursty, shouldn’t worry don’t get immediate response. Typically don’t look repo sufficient quantity issues accumulates, ’s burst intense activity focus efforts. makes development efficient avoids expensive context switching problems, cost taking longer get back . process makes good reprex particularly important might multiple months initial report start working . can’t reproduce bug, can’t fix !","code":""},{"path":"https://haven.tidyverse.org/dev/articles/datetimes.html","id":"formats","dir":"Articles","previous_headings":"","what":"Formats","title":"Dates and times","text":"three common formats across SAS, SPSS Stata. Date (number days) SAS: MMDDYY, DDMMYY, YYMMDD, DATE SPSS: n/Stata: %td Time (number seconds): SAS: TIME, HHMM, TOD SPSS: TIME, DTIME Stata: n/DateTime (number seconds): SAS: DATETIME SPSS: DATE, ADATE, SDATE, DATETIME (milliseconds) Stata: %tc, %tC","code":""},{"path":"https://haven.tidyverse.org/dev/articles/datetimes.html","id":"offsets","dir":"Articles","previous_headings":"","what":"Offsets","title":"Dates and times","text":"Dates date times use difference offset R: SAS: 1960-01-01 (3653 days) SPSS: 1582-10-14. (141428 days) Stata: 1960-01-01. (3653 days)","code":""},{"path":"https://haven.tidyverse.org/dev/articles/datetimes.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Dates and times","text":"SAS: https://support.sas.com/documentation/cdl/en/lrcon/65287/HTML/default/viewer.htm#p1wj0wt2ebe2a0n1lv4lem9hdc0v.htm SPSS: https://www.ibm.com/docs/en/spss-statistics/29.0.0?topic=wizard-dates-times--spss-statistics https://www.ibm.com/docs/en/spss-statistics/29.0.0?topic=formats-date-time Stata: https://www.stata.com/manuals/u25.pdf","code":""},{"path":"https://haven.tidyverse.org/dev/articles/semantics.html","id":"value-labels","dir":"Articles","previous_headings":"","what":"Value labels","title":"Conversion semantics","text":"Base R one data type effectively maintains mapping integers character labels: factor. however, primary use factors: instead designed automatically generate useful contrasts linear models. Factors differ labelled values provided tools important ways: SPSS SAS can label numeric character values, just integer values. value need exhaustive. common label special missing values (e.g. .D = respond, .N = applicable), leaving values . Value labels SAS little different . SAS, labels just special case general formats. Formats include currencies dates, user-defined just assigns labels individual values (including special missings value). Formats names existing independently variables associated . create named format PROC FORMAT associated variables DATA step (names character formats thealways start $).","code":""},{"path":"https://haven.tidyverse.org/dev/articles/semantics.html","id":"labelled","dir":"Articles","previous_headings":"Value labels","what":"labelled()","title":"Conversion semantics","text":"allow import labelled vectors R, haven provides S3 labelled class, created labelled(). class allows associated arbitrary labels numeric character vectors: goal haven provide labelled vector can use everywhere analysis. goal provide intermediate datastructure can convert regular R data frame. can either converting factor stripping labels: See documentation as_factor() options control exactly factor uses levels. as_factor() zap_labels() data frame methods want apply strategy every column data frame:","code":"x1 <- labelled(   sample(1:5),    c(Good = 1, Bad = 5) ) x1 #> <labelled<integer>[5]> #> [1] 5 3 4 1 2 #>  #> Labels: #>  value label #>      1  Good #>      5   Bad  x2 <- labelled(   c(\"M\", \"F\", \"F\", \"F\", \"M\"),    c(Male = \"M\", Female = \"F\") ) x2 #> <labelled<character>[5]> #> [1] M F F F M #>  #> Labels: #>  value  label #>      M   Male #>      F Female as_factor(x1) #> [1] Bad  3    4    Good 2    #> Levels: Good 2 3 4 Bad zap_labels(x1) #> [1] 5 3 4 1 2  as_factor(x2) #> [1] Male   Female Female Female Male   #> Levels: Female Male zap_labels(x2) #> [1] \"M\" \"F\" \"F\" \"F\" \"M\" df <- tibble::data_frame(x1, x2, z = 1:5) #> Warning: `data_frame()` was deprecated in tibble 1.1.0. #> ℹ Please use `tibble()` instead. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning #> was generated. df #> # A tibble: 5 × 3 #>   x1        x2             z #>   <int+lbl> <chr+lbl>  <int> #> 1 5 [Bad]   M [Male]       1 #> 2 3         F [Female]     2 #> 3 4         F [Female]     3 #> 4 1 [Good]  F [Female]     4 #> 5 2         M [Male]       5  zap_labels(df) #> # A tibble: 5 × 3 #>      x1 x2        z #>   <int> <chr> <int> #> 1     5 M         1 #> 2     3 F         2 #> 3     4 F         3 #> 4     1 F         4 #> 5     2 M         5 as_factor(df) #> # A tibble: 5 × 3 #>   x1    x2         z #>   <fct> <fct>  <int> #> 1 Bad   Male       1 #> 2 3     Female     2 #> 3 4     Female     3 #> 4 Good  Female     4 #> 5 2     Male       5"},{"path":"https://haven.tidyverse.org/dev/articles/semantics.html","id":"missing-values","dir":"Articles","previous_headings":"","what":"Missing values","title":"Conversion semantics","text":"three tools provide global “system missing value” displayed .. roughly equivalent R’s NA, although neither Stata SAS propagate missingness numeric comparisons: SAS treats missing value smallest possible number (.e. -inf), Stata treats largest possible number (.e. inf). tool also provides mechanism recording multiple types missingness: Stata “extended” missing values, ..Z. SAS “special” missing values, ..Z plus ._. SPSS per-column “user” missing values. column can declare three distinct values range values (plus one distinct value) treated missing. Stata SAS support tagged missing values numeric columns. SPSS supports three distinct values character columns. Generally, operations involving user-missing type return system missing value. Haven models missing values two different ways: SAS Stata, haven provides “tagged” missing values extend R’s regular NA add single character label. SPSS, haven provides subclass labelled also provides user defined values ranges.","code":""},{"path":"https://haven.tidyverse.org/dev/articles/semantics.html","id":"tagged-missing-values","dir":"Articles","previous_headings":"Missing values","what":"Tagged missing values","title":"Conversion semantics","text":"support Stata’s extended SAS’s special missing value, haven implements tagged NA. taking advantage internal structure floating point NA. allows values behave identical NA regular R operations, still preserving value tag. R interface creating tagged NAs little clunky generally ’ll created haven . can create tagged_na(): Note tagged NAs behave identically regular NAs, even printing. see tags, use print_tagged_na(): test value tagged NA, use is_tagged_na(), extract value tag, use na_tag(): expectation tagged missings often used conjuction labels (described ), labelled vectors print tags , as_factor() knows relabel:","code":"x <- c(1:3, tagged_na(\"a\", \"z\"), 3:1) x #> [1]  1  2  3 NA NA  3  2  1 print_tagged_na(x) #> [1]     1     2     3 NA(a) NA(z)     3     2     1 is_tagged_na(x) #> [1] FALSE FALSE FALSE  TRUE  TRUE FALSE FALSE FALSE is_tagged_na(x, \"a\") #> [1] FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE  na_tag(x) #> [1] NA  NA  NA  \"a\" \"z\" NA  NA  NA y <- labelled(x, c(\"Not home\" = tagged_na(\"a\"), \"Refused\" = tagged_na(\"z\"))) y #> <labelled<double>[8]> #> [1]     1     2     3 NA(a) NA(z)     3     2     1 #>  #> Labels: #>  value    label #>  NA(a) Not home #>  NA(z)  Refused  as_factor(y) #> [1] 1        2        3        Not home Refused  3        2        #> [8] 1        #> Levels: 1 2 3 Not home Refused"},{"path":"https://haven.tidyverse.org/dev/articles/semantics.html","id":"user-defined-missing-values","dir":"Articles","previous_headings":"Missing values","what":"User defined missing values","title":"Conversion semantics","text":"SPSS’s user-defined values work differently SAS Stata. column can either three distinct values considered missing, range. Haven provides labelled_spss() subclass labelled() model additional user-defined missings. objects somewhat dangerous work R R functions don’t know values missing: danger, default behaviour read_spss() return regular labelled objects user-defined missing values converted NAs. get read_spss() return labelled_spss() objects, ’ll need set user_na = TRUE. ’ve defined .na() method can find : presence method mean many functions na.rm argument work correctly: generally either convert factor, convert regular missing vaues, strip labels:","code":"x1 <- labelled_spss(c(1:10, 99), c(Missing = 99), na_value = 99) x2 <- labelled_spss(c(1:10, 99), c(Missing = 99), na_range = c(90, Inf))  x1 #> <labelled_spss<double>[11]> #>  [1]  1  2  3  4  5  6  7  8  9 10 99 #> Missing values: 99 #>  #> Labels: #>  value   label #>     99 Missing x2 #> <labelled_spss<double>[11]> #>  [1]  1  2  3  4  5  6  7  8  9 10 99 #> Missing range:  [90, Inf] #>  #> Labels: #>  value   label #>     99 Missing mean(x1) #> [1] 14 is.na(x1) #>  [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE mean(x1, na.rm = TRUE) #> [1] 14 as_factor(x1) #>  [1] 1       2       3       4       5       6       7       8       #>  [9] 9       10      Missing #> Levels: 1 2 3 4 5 6 7 8 9 10 Missing zap_missing(x1) #>  [1]  1  2  3  4  5  6  7  8  9 10 NA #> attr(,\"labels\") #> Missing  #>      99  #> attr(,\"class\") #> [1] \"haven_labelled\" zap_labels(x1) #>  [1]  1  2  3  4  5  6  7  8  9 10 NA"},{"path":"https://haven.tidyverse.org/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Hadley Wickham. Author, maintainer. Evan Miller. Author, copyright holder.           Author included ReadStat code Danny Smith. Author. . Copyright holder, funder.","code":""},{"path":"https://haven.tidyverse.org/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wickham H, Miller E, Smith D (2025). haven: Import Export 'SPSS', 'Stata' 'SAS' Files. R package version 2.5.4.9000, https://haven.tidyverse.org.","code":"@Manual{,   title = {haven: Import and Export 'SPSS', 'Stata' and 'SAS' Files},   author = {Hadley Wickham and Evan Miller and Danny Smith},   year = {2025},   note = {R package version 2.5.4.9000},   url = {https://haven.tidyverse.org}, }"},{"path":[]},{"path":"https://haven.tidyverse.org/dev/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Import and Export SPSS, Stata and SAS Files","text":"Haven enables R read write various data formats used statistical packages wrapping fantastic ReadStat C library written Evan Miller. Haven part tidyverse. Currently supports: SAS: read_sas() reads .sas7bdat + .sas7bcat files read_xpt() reads SAS transport files (versions 5 8). write_xpt() writes SAS transport files (versions 5 8). SPSS: read_sav() reads .sav files read_por() reads older .por files. write_sav() writes .sav files. Stata: read_dta() reads .dta files (version 15). write_dta() writes .dta files (versions 8-15). output objects: tibbles, better print method long wide files. Translate value labels new labelled() class, preserves original semantics can easily coerced factors as_factor(). Special missing values preserved. See vignette(\"semantics\") details. Dates times converted R date/time classes. Character vectors converted factors.","code":""},{"path":"https://haven.tidyverse.org/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Import and Export SPSS, Stata and SAS Files","text":"","code":"# The easiest way to get haven is to install the whole tidyverse: install.packages(\"tidyverse\")  # Alternatively, install just haven: install.packages(\"haven\")"},{"path":"https://haven.tidyverse.org/dev/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Import and Export SPSS, Stata and SAS Files","text":"","code":"library(haven)  # SAS read_sas(\"mtcars.sas7bdat\") write_xpt(mtcars, \"mtcars.xpt\")  # SPSS read_sav(\"mtcars.sav\") write_sav(mtcars, \"mtcars.sav\")  # Stata read_dta(\"mtcars.dta\") write_dta(mtcars, \"mtcars.dta\")"},{"path":"https://haven.tidyverse.org/dev/index.html","id":"related-work","dir":"","previous_headings":"","what":"Related work","title":"Import and Export SPSS, Stata and SAS Files","text":"foreign reads SAS XPORT, SPSS, Stata (version 12) files. readstat13 reads writes Stata file format versions. sas7bdat reads SAS7BDAT files.","code":""},{"path":"https://haven.tidyverse.org/dev/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Import and Export SPSS, Stata and SAS Files","text":"Please note haven project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://haven.tidyverse.org/dev/reference/as_factor.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert labelled vectors to factors — as_factor","title":"Convert labelled vectors to factors — as_factor","text":"base function .factor() generic, forcats::as_factor() . haven provides as_factor() methods labelled() labelled_spss() vectors, data frames. default, applied data frame, affects labelled columns.","code":""},{"path":"https://haven.tidyverse.org/dev/reference/as_factor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert labelled vectors to factors — as_factor","text":"","code":"# S3 method for class 'data.frame' as_factor(x, ..., only_labelled = TRUE)  # S3 method for class 'haven_labelled' as_factor(   x,   levels = c(\"default\", \"labels\", \"values\", \"both\"),   ordered = FALSE,   ... )  # S3 method for class 'labelled' as_factor(   x,   levels = c(\"default\", \"labels\", \"values\", \"both\"),   ordered = FALSE,   ... )"},{"path":"https://haven.tidyverse.org/dev/reference/as_factor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert labelled vectors to factors — as_factor","text":"x Object coerce factor. ... arguments passed method. only_labelled apply labelled columns? levels create levels generated factor: \"default\": uses labels available, otherwise values. Labels sorted value. \"\": like \"default\", pastes together level value \"label\": use labels; unlabelled values become NA \"values: use values ordered TRUE create ordered (ordinal) factor, FALSE (default) create regular (nominal) factor.","code":""},{"path":"https://haven.tidyverse.org/dev/reference/as_factor.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert labelled vectors to factors — as_factor","text":"Includes methods class haven_labelled labelled backward compatibility.","code":""},{"path":"https://haven.tidyverse.org/dev/reference/as_factor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert labelled vectors to factors — as_factor","text":"","code":"x <- labelled(sample(5, 10, replace = TRUE), c(Bad = 1, Good = 5))  # Default method uses values where available as_factor(x) #>  [1] Good 4    Good 4    Bad  Good Good Good 2    3    #> Levels: Bad 2 3 4 Good # You can also extract just the labels as_factor(x, levels = \"labels\") #>  [1] Good <NA> Good <NA> Bad  Good Good Good <NA> <NA> #> Levels: Bad Good # Or just the values as_factor(x, levels = \"values\") #>  [1] 5 4 5 4 1 5 5 5 2 3 #> Levels: 1 2 3 4 5 # Or combine value and label as_factor(x, levels = \"both\") #>  [1] [5] Good 4        [5] Good 4        [1] Bad  [5] Good [5] Good #>  [8] [5] Good 2        3        #> Levels: [1] Bad 2 3 4 [5] Good  # as_factor() will preserve SPSS missing values from values and ranges y <- labelled_spss(1:10, na_values = c(2, 4), na_range = c(8, 10)) as_factor(y) #>  [1] 1  2  3  4  5  6  7  8  9  10 #> Levels: 1 2 3 4 5 6 7 8 9 10 # use zap_missing() first to convert to NAs zap_missing(y) #>  [1]  1 NA  3 NA  5  6  7 NA NA NA #> attr(,\"class\") #> [1] \"haven_labelled\" as_factor(zap_missing(y)) #>  [1] 1    <NA> 3    <NA> 5    6    7    <NA> <NA> <NA> #> Levels: 1 3 5 6 7"},{"path":"https://haven.tidyverse.org/dev/reference/haven-package.html","id":null,"dir":"Reference","previous_headings":"","what":"haven: Import and Export 'SPSS', 'Stata' and 'SAS' Files — haven-package","title":"haven: Import and Export 'SPSS', 'Stata' and 'SAS' Files — haven-package","text":"Import foreign statistical formats R via embedded 'ReadStat' C library, https://github.com/WizardMac/ReadStat.","code":""},{"path":[]},{"path":"https://haven.tidyverse.org/dev/reference/haven-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"haven: Import and Export 'SPSS', 'Stata' and 'SAS' Files — haven-package","text":"Maintainer: Hadley Wickham hadley@posit.co Authors: Evan Miller (Author included ReadStat code) [copyright holder] Danny Smith contributors: Posit Software, PBC [copyright holder, funder]","code":""},{"path":"https://haven.tidyverse.org/dev/reference/labelled.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a labelled vector. — labelled","title":"Create a labelled vector. — labelled","text":"labelled vector common data structure statistical environments, allowing assign text labels specific values. class makes possible import labelled vectors R without loss fidelity. class provides methods, expect coerce standard R class (e.g. factor()) soon importing.","code":""},{"path":"https://haven.tidyverse.org/dev/reference/labelled.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a labelled vector. — labelled","text":"","code":"labelled(x = double(), labels = NULL, label = NULL)  is.labelled(x)"},{"path":"https://haven.tidyverse.org/dev/reference/labelled.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a labelled vector. — labelled","text":"x vector label. Must either numeric (integer double) character. labels named vector NULL. vector type x. Unlike factors, labels need exhaustive: fraction values might labelled. label short, human-readable description vector.","code":""},{"path":"https://haven.tidyverse.org/dev/reference/labelled.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a labelled vector. — labelled","text":"","code":"s1 <- labelled(c(\"M\", \"M\", \"F\"), c(Male = \"M\", Female = \"F\")) s2 <- labelled(c(1, 1, 2), c(Male = 1, Female = 2)) s3 <- labelled(   c(1, 1, 2),   c(Male = 1, Female = 2),   label = \"Assigned sex at birth\" )  # Unfortunately it's not possible to make as.factor work for labelled objects # so instead use as_factor. This works for all types of labelled vectors. as_factor(s1) #> [1] Male   Male   Female #> Levels: Female Male as_factor(s1, levels = \"values\") #> [1] M M F #> Levels: M F as_factor(s2) #> [1] Male   Male   Female #> Levels: Male Female  # Other statistical software supports multiple types of missing values s3 <- labelled(   c(\"M\", \"M\", \"F\", \"X\", \"N/A\"),   c(Male = \"M\", Female = \"F\", Refused = \"X\", \"Not applicable\" = \"N/A\") ) s3 #> <labelled<character>[5]> #> [1] M   M   F   X   N/A #>  #> Labels: #>  value          label #>      M           Male #>      F         Female #>      X        Refused #>    N/A Not applicable as_factor(s3) #> [1] Male           Male           Female         Refused        #> [5] Not applicable #> Levels: Female Male Not applicable Refused  # Often when you have a partially labelled numeric vector, labelled values # are special types of missing. Use zap_labels to replace labels with missing # values x <- labelled(c(1, 2, 1, 2, 10, 9), c(Unknown = 9, Refused = 10)) zap_labels(x) #> [1]  1  2  1  2 10  9"},{"path":"https://haven.tidyverse.org/dev/reference/labelled_spss.html","id":null,"dir":"Reference","previous_headings":"","what":"Labelled vectors for SPSS — labelled_spss","title":"Labelled vectors for SPSS — labelled_spss","text":"class used user_na = TRUE read_sav(). similar labelled() class also models SPSS's user-defined missings, can three distinct values, numeric vectors range.","code":""},{"path":"https://haven.tidyverse.org/dev/reference/labelled_spss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Labelled vectors for SPSS — labelled_spss","text":"","code":"labelled_spss(   x = double(),   labels = NULL,   na_values = NULL,   na_range = NULL,   label = NULL )"},{"path":"https://haven.tidyverse.org/dev/reference/labelled_spss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Labelled vectors for SPSS — labelled_spss","text":"x vector label. Must either numeric (integer double) character. labels named vector NULL. vector type x. Unlike factors, labels need exhaustive: fraction values might labelled. na_values vector values also considered missing. na_range numeric vector length two giving (inclusive) extents range. Use -Inf Inf want range open ended. label short, human-readable description vector.","code":""},{"path":"https://haven.tidyverse.org/dev/reference/labelled_spss.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Labelled vectors for SPSS — labelled_spss","text":"","code":"x1 <- labelled_spss(1:10, c(Good = 1, Bad = 8), na_values = c(9, 10)) is.na(x1) #>  [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  x2 <- labelled_spss(   1:10,   c(Good = 1, Bad = 8),   na_range = c(9, Inf),   label = \"Quality rating\" ) is.na(x2) #>  [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  # Print data and metadata x2 #> <labelled_spss<integer>[10]>: Quality rating #>  [1]  1  2  3  4  5  6  7  8  9 10 #> Missing range:  [9, Inf] #>  #> Labels: #>  value label #>      1  Good #>      8   Bad"},{"path":"https://haven.tidyverse.org/dev/reference/print_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Print the labels of a labelled vector — print_labels","title":"Print the labels of a labelled vector — print_labels","text":"convenience function, useful explore variables newly imported dataset.","code":""},{"path":"https://haven.tidyverse.org/dev/reference/print_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print the labels of a labelled vector — print_labels","text":"","code":"print_labels(x, name = NULL)"},{"path":"https://haven.tidyverse.org/dev/reference/print_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print the labels of a labelled vector — print_labels","text":"x labelled vector name name vector (optional)","code":""},{"path":"https://haven.tidyverse.org/dev/reference/print_labels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print the labels of a labelled vector — print_labels","text":"","code":"s1 <- labelled(c(\"M\", \"M\", \"F\"), c(Male = \"M\", Female = \"F\")) s2 <- labelled(c(1, 1, 2), c(Male = 1, Female = 2)) labelled_df <- tibble::tibble(s1, s2)  for (var in names(labelled_df)) {   print_labels(labelled_df[[var]], var) } #>  #> Labels:s1 #>  value  label #>      M   Male #>      F Female #>  #> Labels:s2 #>  value  label #>      1   Male #>      2 Female"},{"path":"https://haven.tidyverse.org/dev/reference/read_dta.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and write Stata DTA files — read_dta","title":"Read and write Stata DTA files — read_dta","text":"Currently haven can read write logical, integer, numeric, character factors. See labelled() labelled variables Stata handled R. Character vectors stored strL components strl_threshold bytes longer (version >= 13); otherwise stored appropriate str#.","code":""},{"path":"https://haven.tidyverse.org/dev/reference/read_dta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and write Stata DTA files — read_dta","text":"","code":"read_dta(   file,   encoding = NULL,   col_select = NULL,   skip = 0,   n_max = Inf,   .name_repair = \"unique\" )  read_stata(   file,   encoding = NULL,   col_select = NULL,   skip = 0,   n_max = Inf,   .name_repair = \"unique\" )  write_dta(   data,   path,   version = 14,   label = attr(data, \"label\"),   strl_threshold = 2045,   adjust_tz = TRUE )"},{"path":"https://haven.tidyverse.org/dev/reference/read_dta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and write Stata DTA files — read_dta","text":"file Either path file, connection, literal data (either single string raw vector). Files ending .gz, .bz2, .xz, .zip automatically uncompressed. Files starting http://, https://, ftp://, ftps:// automatically downloaded. Remote gz files can also automatically downloaded decompressed. Literal data useful examples tests. recognised literal data, input must either wrapped (), string containing least one new line, vector containing least one string new line. Using value clipboard() read system clipboard. encoding character encoding used file. Generally, needed Stata 13 files earlier. See Encoding section details. col_select One selection expressions, like dplyr::select(). Use c() list() use one expression. See ?dplyr::select details available selection options. specified columns read data_file. skip Number lines skip reading data. n_max Maximum number lines read. .name_repair Treatment problematic column names: \"minimal\": name repair checks, beyond basic existence, \"unique\": Make sure names unique empty, \"check_unique\": (default value), name repair, check unique, \"universal\": Make names unique syntactic function: apply custom name repair (e.g., .name_repair = make.names names style base R). purrr-style anonymous function, see rlang::as_function() argument passed repair vctrs::vec_as_names(). See details terms strategies used enforce . data Data frame write. path Path file data written. version File version use. Supports versions 8-15. label Dataset label use, NULL. Defaults value stored \"label\" attribute data. Must <= 80 characters. strl_threshold character vectors maximum length greater strl_threshold bytes stored long string (strL) instead standard string (str#) variable version >= 13. defaults 2045, maximum length str# variables. See Stata long string documentation details. adjust_tz Stata, SPSS SAS concept time zone, date-time variables treated UTC. adjust_tz controls timezone date-time values treated writing. TRUE (default) timezone date-time values ignored, display R Stata/SPSS/SAS, e.g. \"2010-01-01 09:00:00 NZDT\" written \"2010-01-01 09:00:00\". Note changes underlying numeric data, use caution preserving -time-point differences critical. FALSE, date-time values written corresponding UTC value, e.g. \"2010-01-01 09:00:00 NZDT\" written \"2009-12-31 20:00:00\".","code":""},{"path":"https://haven.tidyverse.org/dev/reference/read_dta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read and write Stata DTA files — read_dta","text":"tibble, data frame variant nice defaults. Variable labels stored \"label\" attribute variable. printed console, RStudio viewer show . dataset label defined Stata, stored \"label\" attribute tibble. write_dta() returns input data invisibly.","code":""},{"path":"https://haven.tidyverse.org/dev/reference/read_dta.html","id":"character-encoding","dir":"Reference","previous_headings":"","what":"Character encoding","title":"Read and write Stata DTA files — read_dta","text":"Prior Stata 14, files declare text encoding, default encoding differed across platforms. encoding = NULL, haven assumes encoding windows-1252, text encoding used Stata Windows. Unfortunately Stata Mac Linux use different default encoding, \"latin1\". encounter error \"Unable convert string requested encoding\", try encoding = \"latin1\" Stata 14 later, need manually specify encoding value unless value incorrectly recorded source file.","code":""},{"path":"https://haven.tidyverse.org/dev/reference/read_dta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read and write Stata DTA files — read_dta","text":"","code":"path <- system.file(\"examples\", \"iris.dta\", package = \"haven\") read_dta(path) #> # A tibble: 150 × 5 #>    sepallength sepalwidth petallength petalwidth species #>          <dbl>      <dbl>       <dbl>      <dbl> <chr>   #>  1        5.10       3.5         1.40      0.200 setosa  #>  2        4.90       3           1.40      0.200 setosa  #>  3        4.70       3.20        1.30      0.200 setosa  #>  4        4.60       3.10        1.5       0.200 setosa  #>  5        5          3.60        1.40      0.200 setosa  #>  6        5.40       3.90        1.70      0.400 setosa  #>  7        4.60       3.40        1.40      0.300 setosa  #>  8        5          3.40        1.5       0.200 setosa  #>  9        4.40       2.90        1.40      0.200 setosa  #> 10        4.90       3.10        1.5       0.100 setosa  #> # ℹ 140 more rows  tmp <- tempfile(fileext = \".dta\") write_dta(mtcars, tmp) read_dta(tmp) #> # A tibble: 32 × 11 #>      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1  21       6  160    110  3.9   2.62  16.5     0     1     4     4 #>  2  21       6  160    110  3.9   2.88  17.0     0     1     4     4 #>  3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1 #>  4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1 #>  5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2 #>  6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1 #>  7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4 #>  8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2 #>  9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2 #> 10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4 #> # ℹ 22 more rows read_stata(tmp) #> # A tibble: 32 × 11 #>      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1  21       6  160    110  3.9   2.62  16.5     0     1     4     4 #>  2  21       6  160    110  3.9   2.88  17.0     0     1     4     4 #>  3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1 #>  4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1 #>  5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2 #>  6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1 #>  7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4 #>  8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2 #>  9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2 #> 10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4 #> # ℹ 22 more rows"},{"path":"https://haven.tidyverse.org/dev/reference/read_sas.html","id":null,"dir":"Reference","previous_headings":"","what":"Read SAS files — read_sas","title":"Read SAS files — read_sas","text":"read_sas() supports sas7bdat files accompanying sas7bcat files SAS uses record value labels.","code":""},{"path":"https://haven.tidyverse.org/dev/reference/read_sas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read SAS files — read_sas","text":"","code":"read_sas(   data_file,   catalog_file = NULL,   encoding = NULL,   catalog_encoding = encoding,   col_select = NULL,   skip = 0L,   n_max = Inf,   cols_only = deprecated(),   .name_repair = \"unique\" )"},{"path":"https://haven.tidyverse.org/dev/reference/read_sas.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read SAS files — read_sas","text":"data_file, catalog_file Path data catalog files. files processed readr::datasource(). encoding, catalog_encoding character encoding used data_file catalog_encoding respectively. value NULL uses encoding specified file; use argument override incorrect. col_select One selection expressions, like dplyr::select(). Use c() list() use one expression. See ?dplyr::select details available selection options. specified columns read data_file. skip Number lines skip reading data. n_max Maximum number lines read. cols_only cols_only longer supported; use col_select instead. .name_repair Treatment problematic column names: \"minimal\": name repair checks, beyond basic existence, \"unique\": Make sure names unique empty, \"check_unique\": (default value), name repair, check unique, \"universal\": Make names unique syntactic function: apply custom name repair (e.g., .name_repair = make.names names style base R). purrr-style anonymous function, see rlang::as_function() argument passed repair vctrs::vec_as_names(). See details terms strategies used enforce .","code":""},{"path":"https://haven.tidyverse.org/dev/reference/read_sas.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read SAS files — read_sas","text":"tibble, data frame variant nice defaults. Variable labels stored \"label\" attribute variable. printed console, RStudio viewer show . write_sas() returns input data invisibly.","code":""},{"path":"https://haven.tidyverse.org/dev/reference/read_sas.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read SAS files — read_sas","text":"","code":"path <- system.file(\"examples\", \"iris.sas7bdat\", package = \"haven\") read_sas(path) #> # A tibble: 150 × 5 #>    Sepal_Length Sepal_Width Petal_Length Petal_Width Species #>           <dbl>       <dbl>        <dbl>       <dbl> <chr>   #>  1          5.1         3.5          1.4         0.2 setosa  #>  2          4.9         3            1.4         0.2 setosa  #>  3          4.7         3.2          1.3         0.2 setosa  #>  4          4.6         3.1          1.5         0.2 setosa  #>  5          5           3.6          1.4         0.2 setosa  #>  6          5.4         3.9          1.7         0.4 setosa  #>  7          4.6         3.4          1.4         0.3 setosa  #>  8          5           3.4          1.5         0.2 setosa  #>  9          4.4         2.9          1.4         0.2 setosa  #> 10          4.9         3.1          1.5         0.1 setosa  #> # ℹ 140 more rows"},{"path":"https://haven.tidyverse.org/dev/reference/read_spss.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and write SPSS files — read_spss","title":"Read and write SPSS files — read_spss","text":"read_sav() reads .sav .zsav files; write_sav() creates .zsav files compress = TRUE. read_por() reads .por files. read_spss() uses either read_por() read_sav() based file extension.","code":""},{"path":"https://haven.tidyverse.org/dev/reference/read_spss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and write SPSS files — read_spss","text":"","code":"read_sav(   file,   encoding = NULL,   user_na = FALSE,   col_select = NULL,   skip = 0,   n_max = Inf,   .name_repair = \"unique\" )  read_por(   file,   user_na = FALSE,   col_select = NULL,   skip = 0,   n_max = Inf,   .name_repair = \"unique\" )  write_sav(data, path, compress = c(\"byte\", \"none\", \"zsav\"), adjust_tz = TRUE)  read_spss(   file,   user_na = FALSE,   col_select = NULL,   skip = 0,   n_max = Inf,   .name_repair = \"unique\" )"},{"path":"https://haven.tidyverse.org/dev/reference/read_spss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and write SPSS files — read_spss","text":"file Either path file, connection, literal data (either single string raw vector). Files ending .gz, .bz2, .xz, .zip automatically uncompressed. Files starting http://, https://, ftp://, ftps:// automatically downloaded. Remote gz files can also automatically downloaded decompressed. Literal data useful examples tests. recognised literal data, input must either wrapped (), string containing least one new line, vector containing least one string new line. Using value clipboard() read system clipboard. encoding character encoding used file. default, NULL, use encoding specified file, sometimes value incorrect useful able override . user_na TRUE variables user defined missing read labelled_spss() objects. FALSE, default, user-defined missings converted NA. col_select One selection expressions, like dplyr::select(). Use c() list() use one expression. See ?dplyr::select details available selection options. specified columns read data_file. skip Number lines skip reading data. n_max Maximum number lines read. .name_repair Treatment problematic column names: \"minimal\": name repair checks, beyond basic existence, \"unique\": Make sure names unique empty, \"check_unique\": (default value), name repair, check unique, \"universal\": Make names unique syntactic function: apply custom name repair (e.g., .name_repair = make.names names style base R). purrr-style anonymous function, see rlang::as_function() argument passed repair vctrs::vec_as_names(). See details terms strategies used enforce . data Data frame write. path Path file data written. compress Compression type use: \"byte\": default, uses byte compression. \"none\": compression. useful software issues byte compressed .sav files (e.g. SAS). \"zsav\": uses zlib compression produces .zsav file. zlib compression supported SPSS version 21.0 . TRUE FALSE can used backwards compatibility, correspond \"zsav\" \"none\" options respectively. adjust_tz Stata, SPSS SAS concept time zone, date-time variables treated UTC. adjust_tz controls timezone date-time values treated writing. TRUE (default) timezone date-time values ignored, display R Stata/SPSS/SAS, e.g. \"2010-01-01 09:00:00 NZDT\" written \"2010-01-01 09:00:00\". Note changes underlying numeric data, use caution preserving -time-point differences critical. FALSE, date-time values written corresponding UTC value, e.g. \"2010-01-01 09:00:00 NZDT\" written \"2009-12-31 20:00:00\".","code":""},{"path":"https://haven.tidyverse.org/dev/reference/read_spss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read and write SPSS files — read_spss","text":"tibble, data frame variant nice defaults. Variable labels stored \"label\" attribute variable. printed console, RStudio viewer show . write_sav() returns input data invisibly.","code":""},{"path":"https://haven.tidyverse.org/dev/reference/read_spss.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read and write SPSS files — read_spss","text":"Currently haven can read write logical, integer, numeric, character factors. See labelled_spss() labelled variables SPSS handled R.","code":""},{"path":"https://haven.tidyverse.org/dev/reference/read_spss.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read and write SPSS files — read_spss","text":"","code":"path <- system.file(\"examples\", \"iris.sav\", package = \"haven\") read_sav(path) #> # A tibble: 150 × 5 #>    Sepal.Length Sepal.Width Petal.Length Petal.Width Species    #>           <dbl>       <dbl>        <dbl>       <dbl> <dbl+lbl>  #>  1          5.1         3.5          1.4         0.2 1 [setosa] #>  2          4.9         3            1.4         0.2 1 [setosa] #>  3          4.7         3.2          1.3         0.2 1 [setosa] #>  4          4.6         3.1          1.5         0.2 1 [setosa] #>  5          5           3.6          1.4         0.2 1 [setosa] #>  6          5.4         3.9          1.7         0.4 1 [setosa] #>  7          4.6         3.4          1.4         0.3 1 [setosa] #>  8          5           3.4          1.5         0.2 1 [setosa] #>  9          4.4         2.9          1.4         0.2 1 [setosa] #> 10          4.9         3.1          1.5         0.1 1 [setosa] #> # ℹ 140 more rows  tmp <- tempfile(fileext = \".sav\") write_sav(mtcars, tmp) read_sav(tmp) #> # A tibble: 32 × 11 #>      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1  21       6  160    110  3.9   2.62  16.5     0     1     4     4 #>  2  21       6  160    110  3.9   2.88  17.0     0     1     4     4 #>  3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1 #>  4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1 #>  5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2 #>  6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1 #>  7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4 #>  8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2 #>  9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2 #> 10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4 #> # ℹ 22 more rows"},{"path":"https://haven.tidyverse.org/dev/reference/read_xpt.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and write SAS transport files — read_xpt","title":"Read and write SAS transport files — read_xpt","text":"SAS transport format open format, required submission data FDA.","code":""},{"path":"https://haven.tidyverse.org/dev/reference/read_xpt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and write SAS transport files — read_xpt","text":"","code":"read_xpt(   file,   col_select = NULL,   skip = 0,   n_max = Inf,   .name_repair = \"unique\" )  write_xpt(   data,   path,   version = 8,   name = NULL,   label = attr(data, \"label\"),   adjust_tz = TRUE )"},{"path":"https://haven.tidyverse.org/dev/reference/read_xpt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and write SAS transport files — read_xpt","text":"file Either path file, connection, literal data (either single string raw vector). Files ending .gz, .bz2, .xz, .zip automatically uncompressed. Files starting http://, https://, ftp://, ftps:// automatically downloaded. Remote gz files can also automatically downloaded decompressed. Literal data useful examples tests. recognised literal data, input must either wrapped (), string containing least one new line, vector containing least one string new line. Using value clipboard() read system clipboard. col_select One selection expressions, like dplyr::select(). Use c() list() use one expression. See ?dplyr::select details available selection options. specified columns read data_file. skip Number lines skip reading data. n_max Maximum number lines read. .name_repair Treatment problematic column names: \"minimal\": name repair checks, beyond basic existence, \"unique\": Make sure names unique empty, \"check_unique\": (default value), name repair, check unique, \"universal\": Make names unique syntactic function: apply custom name repair (e.g., .name_repair = make.names names style base R). purrr-style anonymous function, see rlang::as_function() argument passed repair vctrs::vec_as_names(). See details terms strategies used enforce . data Data frame write. path Path file data written. version Version transport file specification use: either 5 8. name Member name record file. Defaults file name sans extension. Must <= 8 characters version 5, <= 32 characters version 8. label Dataset label use, NULL. Defaults value stored \"label\" attribute data. Note although SAS supports dataset labels 256 characters long, dataset labels SAS transport files must <= 40 characters. adjust_tz Stata, SPSS SAS concept time zone, date-time variables treated UTC. adjust_tz controls timezone date-time values treated writing. TRUE (default) timezone date-time values ignored, display R Stata/SPSS/SAS, e.g. \"2010-01-01 09:00:00 NZDT\" written \"2010-01-01 09:00:00\". Note changes underlying numeric data, use caution preserving -time-point differences critical. FALSE, date-time values written corresponding UTC value, e.g. \"2010-01-01 09:00:00 NZDT\" written \"2009-12-31 20:00:00\".","code":""},{"path":"https://haven.tidyverse.org/dev/reference/read_xpt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read and write SAS transport files — read_xpt","text":"tibble, data frame variant nice defaults. Variable labels stored \"label\" attribute variable. printed console, RStudio viewer show . dataset label defined, stored \"label\" attribute tibble. write_xpt() returns input data invisibly.","code":""},{"path":"https://haven.tidyverse.org/dev/reference/read_xpt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read and write SAS transport files — read_xpt","text":"","code":"tmp <- tempfile(fileext = \".xpt\") write_xpt(mtcars, tmp) read_xpt(tmp) #> # A tibble: 32 × 11 #>      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1  21       6  160    110  3.9   2.62  16.5     0     1     4     4 #>  2  21       6  160    110  3.9   2.88  17.0     0     1     4     4 #>  3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1 #>  4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1 #>  5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2 #>  6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1 #>  7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4 #>  8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2 #>  9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2 #> 10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4 #> # ℹ 22 more rows"},{"path":"https://haven.tidyverse.org/dev/reference/tagged_na.html","id":null,"dir":"Reference","previous_headings":"","what":"","title":"","text":"\"Tagged\" missing values work exactly like regular R missing values except store one additional byte information tag, usually letter (\"\" \"z\"). loading SAS Stata file, tagged missing values always use lower case values.","code":""},{"path":"https://haven.tidyverse.org/dev/reference/tagged_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"","text":"","code":"tagged_na(...)  na_tag(x)  is_tagged_na(x, tag = NULL)  format_tagged_na(x, digits = getOption(\"digits\"))  print_tagged_na(x, digits = getOption(\"digits\"))"},{"path":"https://haven.tidyverse.org/dev/reference/tagged_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"","text":"... Vectors containing single character. letter used \"tag\" missing value. x numeric vector tag NULL, return true tag value. digits Number digits use string representation","code":""},{"path":"https://haven.tidyverse.org/dev/reference/tagged_na.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"","text":"format_tagged_na() print_tagged_na() format tagged NA's NA(), NA(b), etc.","code":""},{"path":"https://haven.tidyverse.org/dev/reference/tagged_na.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"","text":"","code":"x <- c(1:5, tagged_na(\"a\"), tagged_na(\"z\"), NA)  # Tagged NA's work identically to regular NAs x #> [1]  1  2  3  4  5 NA NA NA is.na(x) #> [1] FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  # To see that they're special, you need to use na_tag(), # is_tagged_na(), or print_tagged_na(): is_tagged_na(x) #> [1] FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE FALSE na_tag(x) #> [1] NA  NA  NA  NA  NA  \"a\" \"z\" NA  print_tagged_na(x) #> [1]     1     2     3     4     5 NA(a) NA(z)    NA  # You can test for specific tagged NAs with the second argument is_tagged_na(x, \"a\") #> [1] FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE  # Because the support for tagged's NAs is somewhat tagged on to R, # the left-most NA will tend to be preserved in arithmetic operations. na_tag(tagged_na(\"a\") + tagged_na(\"z\")) #> [1] \"a\""},{"path":"https://haven.tidyverse.org/dev/reference/vec_arith.haven_labelled.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal vctrs methods — vec_arith.haven_labelled","title":"Internal vctrs methods — vec_arith.haven_labelled","text":"Internal vctrs methods","code":""},{"path":"https://haven.tidyverse.org/dev/reference/vec_arith.haven_labelled.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal vctrs methods — vec_arith.haven_labelled","text":"","code":"# S3 method for class 'haven_labelled' vec_arith(op, x, y, ...)"},{"path":"https://haven.tidyverse.org/dev/reference/write_sas.html","id":null,"dir":"Reference","previous_headings":"","what":"Write SAS files — write_sas","title":"Write SAS files — write_sas","text":"write_sas() creates sas7bdat files. Unfortunately SAS file format complex undocumented, write_sas() unreliable cases SAS read files produces. write_xpt() writes files open SAS transport format, limitations reliably read SAS.","code":""},{"path":"https://haven.tidyverse.org/dev/reference/write_sas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write SAS files — write_sas","text":"","code":"write_sas(data, path)"},{"path":"https://haven.tidyverse.org/dev/reference/write_sas.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write SAS files — write_sas","text":"data Data frame write. path Path file data written.","code":""},{"path":"https://haven.tidyverse.org/dev/reference/zap_empty.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert empty strings into missing values — zap_empty","title":"Convert empty strings into missing values — zap_empty","text":"Convert empty strings missing values","code":""},{"path":"https://haven.tidyverse.org/dev/reference/zap_empty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert empty strings into missing values — zap_empty","text":"","code":"zap_empty(x)"},{"path":"https://haven.tidyverse.org/dev/reference/zap_empty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert empty strings into missing values — zap_empty","text":"x character vector","code":""},{"path":"https://haven.tidyverse.org/dev/reference/zap_empty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert empty strings into missing values — zap_empty","text":"character vector empty strings replaced missing values.","code":""},{"path":[]},{"path":"https://haven.tidyverse.org/dev/reference/zap_empty.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert empty strings into missing values — zap_empty","text":"","code":"x <- c(\"a\", \"\", \"c\") zap_empty(x) #> [1] \"a\" NA  \"c\""},{"path":"https://haven.tidyverse.org/dev/reference/zap_formats.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove format attributes — zap_formats","title":"Remove format attributes — zap_formats","text":"provide mild support round-tripping variables Stata/SPSS R, haven stores variable formats attribute: format.stata, format.spss, format.sas. causes problems code, can get rid zap_formats.","code":""},{"path":"https://haven.tidyverse.org/dev/reference/zap_formats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove format attributes — zap_formats","text":"","code":"zap_formats(x)"},{"path":"https://haven.tidyverse.org/dev/reference/zap_formats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove format attributes — zap_formats","text":"x vector data frame.","code":""},{"path":[]},{"path":"https://haven.tidyverse.org/dev/reference/zap_label.html","id":null,"dir":"Reference","previous_headings":"","what":"Zap variable labels — zap_label","title":"Zap variable labels — zap_label","text":"Removes variable label, leaving unlabelled vectors .","code":""},{"path":"https://haven.tidyverse.org/dev/reference/zap_label.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zap variable labels — zap_label","text":"","code":"zap_label(x)"},{"path":"https://haven.tidyverse.org/dev/reference/zap_label.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zap variable labels — zap_label","text":"x vector data frame","code":""},{"path":[]},{"path":"https://haven.tidyverse.org/dev/reference/zap_label.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Zap variable labels — zap_label","text":"","code":"x1 <- labelled(1:5, c(good = 1, bad = 5), label = \"rating\") x1 #> <labelled<integer>[5]>: rating #> [1] 1 2 3 4 5 #>  #> Labels: #>  value label #>      1  good #>      5   bad zap_label(x1) #> <labelled<integer>[5]> #> [1] 1 2 3 4 5 #>  #> Labels: #>  value label #>      1  good #>      5   bad  x2 <- labelled_spss(c(1:4, 9), label = \"score\", na_values = 9) x2 #> <labelled_spss<double>[5]>: score #> [1] 1 2 3 4 9 #> Missing values: 9 zap_label(x2) #> <labelled_spss<double>[5]> #> [1] 1 2 3 4 9 #> Missing values: 9  # zap_label also works with data frames df <- tibble::tibble(x1, x2) str(df) #> tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>  $ x1: int+lbl [1:5] 1, 2, 3, 4, 5 #>    ..@ labels: Named int [1:2] 1 5 #>    .. ..- attr(*, \"names\")= chr [1:2] \"good\" \"bad\" #>    ..@ label : chr \"rating\" #>  $ x2: dbl+lbl [1:5] 1, 2, 3, 4, 9 #>    ..@ label    : chr \"score\" #>    ..@ na_values: num 9 str(zap_label(df)) #> tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>  $ x1: int+lbl [1:5] 1, 2, 3, 4, 5 #>    ..@ labels: Named int [1:2] 1 5 #>    .. ..- attr(*, \"names\")= chr [1:2] \"good\" \"bad\" #>  $ x2: dbl+lbl [1:5] 1, 2, 3, 4, 9 #>    ..@ na_values: num 9"},{"path":"https://haven.tidyverse.org/dev/reference/zap_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Zap value labels — zap_labels","title":"Zap value labels — zap_labels","text":"Removes value labels, leaving unlabelled vectors . Use want simply drop labels data frame. Zapping labels labelled_spss() also removes user-defined missing values default, replacing standard NAs. Use user_na argument override behaviour.","code":""},{"path":"https://haven.tidyverse.org/dev/reference/zap_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zap value labels — zap_labels","text":"","code":"zap_labels(x, ...)  # S3 method for class 'haven_labelled_spss' zap_labels(x, ..., user_na = FALSE)"},{"path":"https://haven.tidyverse.org/dev/reference/zap_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zap value labels — zap_labels","text":"x vector data frame ... arguments passed method. user_na FALSE, default, zap_labels() convert labelled_spss() user-defined missing values NA. TRUE treated like normal values.","code":""},{"path":[]},{"path":"https://haven.tidyverse.org/dev/reference/zap_labels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Zap value labels — zap_labels","text":"","code":"x1 <- labelled(1:5, c(good = 1, bad = 5)) x1 #> <labelled<integer>[5]> #> [1] 1 2 3 4 5 #>  #> Labels: #>  value label #>      1  good #>      5   bad zap_labels(x1) #> [1] 1 2 3 4 5  x2 <- labelled_spss(c(1:4, 9), c(good = 1, bad = 5), na_values = 9) x2 #> <labelled_spss<double>[5]> #> [1] 1 2 3 4 9 #> Missing values: 9 #>  #> Labels: #>  value label #>      1  good #>      5   bad zap_labels(x2) #> [1]  1  2  3  4 NA  # Keep the user defined missing values zap_labels(x2, user_na = TRUE) #> [1] 1 2 3 4 9  # zap_labels also works with data frames df <- tibble::tibble(x1, x2) df #> # A tibble: 5 × 2 #>   x1        x2        #>   <int+lbl> <dbl+lbl> #> 1 1 [good]  1 [good]  #> 2 2         2         #> 3 3         3         #> 4 4         4         #> 5 5 [bad]   9 (NA)    zap_labels(df) #> # A tibble: 5 × 2 #>      x1    x2 #>   <int> <dbl> #> 1     1     1 #> 2     2     2 #> 3     3     3 #> 4     4     4 #> 5     5    NA"},{"path":"https://haven.tidyverse.org/dev/reference/zap_missing.html","id":null,"dir":"Reference","previous_headings":"","what":"Zap special missings to regular R missings — zap_missing","title":"Zap special missings to regular R missings — zap_missing","text":"useful want convert tagged missing values SAS Stata, user-defined missings SPSS, regular R NA.","code":""},{"path":"https://haven.tidyverse.org/dev/reference/zap_missing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zap special missings to regular R missings — zap_missing","text":"","code":"zap_missing(x)"},{"path":"https://haven.tidyverse.org/dev/reference/zap_missing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zap special missings to regular R missings — zap_missing","text":"x vector data frame","code":""},{"path":"https://haven.tidyverse.org/dev/reference/zap_missing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Zap special missings to regular R missings — zap_missing","text":"","code":"x1 <- labelled(   c(1, 5, tagged_na(\"a\", \"b\")),   c(Unknown = tagged_na(\"a\"), Refused = tagged_na(\"b\")) ) x1 #> <labelled<double>[4]> #> [1]     1     5 NA(a) NA(b) #>  #> Labels: #>  value   label #>  NA(a) Unknown #>  NA(b) Refused zap_missing(x1) #> <labelled<double>[4]> #> [1]  1  5 NA NA  x2 <- labelled_spss(   c(1, 2, 1, 99),   c(missing = 99),   na_value = 99 ) x2 #> <labelled_spss<double>[4]> #> [1]  1  2  1 99 #> Missing values: 99 #>  #> Labels: #>  value   label #>     99 missing zap_missing(x2) #> [1]  1  2  1 NA #> attr(,\"labels\") #> missing  #>      99  #> attr(,\"class\") #> [1] \"haven_labelled\"  # You can also apply to data frames df <- tibble::tibble(x1, x2, y = 4:1) df #> # A tibble: 4 × 3 #>   x1              x2                    y #>   <dbl+lbl>       <dbl+lbl>         <int> #> 1     1            1                    4 #> 2     5            2                    3 #> 3 NA(a) [Unknown]  1                    2 #> 4 NA(b) [Refused] 99 (NA) [missing]     1 zap_missing(df) #> # A tibble: 4 × 3 #>   x1        x2            y #>   <dbl+lbl> <dbl+lbl> <int> #> 1  1         1            4 #> 2  5         2            3 #> 3 NA         1            2 #> 4 NA        NA            1"},{"path":"https://haven.tidyverse.org/dev/reference/zap_widths.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove display width attributes — zap_widths","title":"Remove display width attributes — zap_widths","text":"provide mild support round-tripping variables SPSS R, haven stores display widths attribute: display_width. causes problems code, can get rid zap_widths.","code":""},{"path":"https://haven.tidyverse.org/dev/reference/zap_widths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove display width attributes — zap_widths","text":"","code":"zap_widths(x)"},{"path":"https://haven.tidyverse.org/dev/reference/zap_widths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove display width attributes — zap_widths","text":"x vector data frame.","code":""},{"path":[]},{"path":[]},{"path":"https://haven.tidyverse.org/dev/news/index.html","id":"haven-254","dir":"Changelog","previous_headings":"","what":"haven 2.5.4","title":"haven 2.5.4","text":"CRAN release: 2023-11-30 Fix upcoming R-devel change.","code":""},{"path":"https://haven.tidyverse.org/dev/news/index.html","id":"haven-253","dir":"Changelog","previous_headings":"","what":"haven 2.5.3","title":"haven 2.5.3","text":"CRAN release: 2023-06-30 Fix upcoming R-devel change.","code":""},{"path":"https://haven.tidyverse.org/dev/news/index.html","id":"haven-252","dir":"Changelog","previous_headings":"","what":"haven 2.5.2","title":"haven 2.5.2","text":"CRAN release: 2023-02-28 Updated ReadStat 1.1.9. Fix various SAS catalog file reading bugs (#529, #653, #680, #696, #705). Increase maximum SAS page file size 16MiB (#697). Ignore invalid SAV timestamp strings (#683). Fix compiler warnings (#707). experimental write_sas() function deprecated (#224). sas7bdat file format complex undocumented, writing SAS files officially supported ReadStat. write_xpt() used instead - produces files SAS transport format, limitations reliably read SAS. write_*() functions gain new adjust_tz argument allow control time zone conversion date-time variables (#702). Thanks @jmobrien detailed issue feedback. Stata, SPSS SAS concept time zone. Since haven 2.4.0 date-time values non-UTC time zones implicitly converted writing ensure time displayed Stata/SPSS/SAS match time displayed user R (see #555). behaviour adjust_tz = TRUE (default). Although line general user expectations can cause issues time zone important, e.g. looking differences time points, since underlying numeric data changed preserve displayed time. Use adjust_tz = FALSE write time corresponding UTC value, appear different user preserves underlying numeric data. write_*() functions previously returned data frame minor alterations made date-time variables. functions now invisibly return original input data frame unchanged (@jmobrien, #702). Fix bug string variable width calculation treated NA values width NA values now treated blanks width calculations (#699).","code":""},{"path":"https://haven.tidyverse.org/dev/news/index.html","id":"haven-251","dir":"Changelog","previous_headings":"","what":"haven 2.5.1","title":"haven 2.5.1","text":"CRAN release: 2022-08-22 labelled() vectors now left-aligned column headers printing tibbles better alignment labels (#676). write_*() now accept functions well strings .name_repair argument line documentation. Previously supported string values (#684). write_sav() variable name validation longer treats non-ASCII characters invalid (#689).","code":""},{"path":"https://haven.tidyverse.org/dev/news/index.html","id":"haven-250","dir":"Changelog","previous_headings":"","what":"haven 2.5.0","title":"haven 2.5.0","text":"CRAN release: 2022-04-15","code":""},{"path":"https://haven.tidyverse.org/dev/news/index.html","id":"new-author-2-5-0","dir":"Changelog","previous_headings":"","what":"New author","title":"haven 2.5.0","text":"@gorcha now haven author recognition significant sustained contributions.","code":""},{"path":"https://haven.tidyverse.org/dev/news/index.html","id":"file-writing-improvements-2-5-0","dir":"Changelog","previous_headings":"","what":"File writing improvements","title":"haven 2.5.0","text":"write_ functions can now write custom variable widths setting width attribute (#650). writing files, minimum width character variables now 1. fixes issues statistical software reading blank character variables width 0 (#650). write_dta() now uses strL strings long stored str# variable (#437). strL used strings longer 2045 characters default, matches Stata’s behaviour, can reduced strl_threshold argument. write_xpt() can now write dataset labels label argument, defaults label attribute input data frame, present (#562). write_sav() now checks case-insensitive duplicate variable names (@juansebastianl, #641) verifies variable names valid SPSS variables. compress argument write_sav() now supports 3 SPSS compression modes specified character string - “byte”, “none” “zsav” (#614). TRUE FALSE can used backwards compatibility, correspond “zsav” “none” options respectively. write_sav() successfully writes user missing values ranges labelled() integer vectors (#596). POSIXct POSIXlt values time component (e.g. “2010-01-01”) converted NA attempting convert output timezone UTC. now output successfully (#634). Fix bug output timezone conversion causing variable labels variable attributes disappear (#624).","code":""},{"path":"https://haven.tidyverse.org/dev/news/index.html","id":"other-improvements-and-fixes-2-5-0","dir":"Changelog","previous_headings":"","what":"Other improvements and fixes","title":"haven 2.5.0","text":"Updated ReadStat 1.1.8 RC. Fix bug writing formats XPT files (#650). Fix one error indexing strL variables (#437). labelled() vectors now throw warning combining two vectors conflicting labels (#667). zap_labels() gains user_na argument control whether user-defined missing values converted NA left (#638). vctrs casting coercion generics now less work working two identical labelled() vectors. significantly improves performance working labelled() vectors grouped data frames (#658). Errors warnings now use cli_abort() cli_warning() (#661).","code":""},{"path":"https://haven.tidyverse.org/dev/news/index.html","id":"dependency-changes-2-5-0","dir":"Changelog","previous_headings":"","what":"Dependency changes","title":"haven 2.5.0","text":"R 3.4 now minimum supported version, line tidyverse policy. cli >= 3.0.0 added Imports support new error messaging. lifecycle added Imports, now used manage deprecations.","code":""},{"path":"https://haven.tidyverse.org/dev/news/index.html","id":"haven-243","dir":"Changelog","previous_headings":"","what":"haven 2.4.3","title":"haven 2.4.3","text":"CRAN release: 2021-08-04 Fix build failure Solaris.","code":""},{"path":"https://haven.tidyverse.org/dev/news/index.html","id":"haven-242","dir":"Changelog","previous_headings":"","what":"haven 2.4.2","title":"haven 2.4.2","text":"CRAN release: 2021-08-02 Updated ReadStat 1.1.7 RC (#620). read_dta() longer crashes sees StrL variables missing values (@gorcha, #594, #600, #608). write_dta() now correctly handles “labelled”-class numeric (double) variables don’t value labels (@jmobrien, #606, #609). write_dta() now allows variable names 32 characters (@sbae, #605). Can now correctly combine labelled_spss() identical labels (@gorcha, #599).","code":""},{"path":"https://haven.tidyverse.org/dev/news/index.html","id":"haven-241","dir":"Changelog","previous_headings":"","what":"haven 2.4.1","title":"haven 2.4.1","text":"CRAN release: 2021-04-23 Fix buglet combining labelled() identical labels.","code":""},{"path":"https://haven.tidyverse.org/dev/news/index.html","id":"haven-240","dir":"Changelog","previous_headings":"","what":"haven 2.4.0","title":"haven 2.4.0","text":"CRAN release: 2021-04-14","code":""},{"path":"https://haven.tidyverse.org/dev/news/index.html","id":"new-features-2-4-0","dir":"Changelog","previous_headings":"","what":"New features","title":"haven 2.4.0","text":"labelled_spss() gains full vctrs support thanks hard work @gorcha (#527, #534, #538, #557). means now work seamlessly dplyr 1.0.0, tidyr 1.0.0 packages use vctrs. labelled() vectors permissive concatenating; output labels combination left-hand right-hand side, preferring values assigned left-hand side (#543). Date-times longer forced UTC, instead converted equivalent UTC (#555). ensure see date-time R Stata/SPSS/SAS.","code":""},{"path":"https://haven.tidyverse.org/dev/news/index.html","id":"minor-improvements-and-bug-fixes-2-4-0","dir":"Changelog","previous_headings":"","what":"Minor improvements and bug fixes","title":"haven 2.4.0","text":"Updated ReadStat 1.1.5. importantly includes support SAS binary compression. as_factor(levels = \"values\") preserves values unlabelled elements (#570). labelled_spss() little stricter: prevents na_range na_value containing missing values, ensures na_range correct order (#574). read_spss() now reads NA values ranges character variables (#409). write_dta() now correctly writes tagged NAs (including tagged NAs labels) (#583) validates length variables names (#485). write_*() now validate file variable metadata ReadStat. prevent many invalid files written (#408). Additionally, validation failures now provide details source problem (e.g. column name problem) (#463). write_sav(compress = FALSE) now uses SPSS bytecode compression instead rarely-used uncompressed mode. compress = TRUE continues use newer (universally supported, compact) zlib format (@oliverbock, #544).","code":""},{"path":"https://haven.tidyverse.org/dev/news/index.html","id":"haven-231","dir":"Changelog","previous_headings":"","what":"haven 2.3.1","title":"haven 2.3.1","text":"CRAN release: 2020-06-01 Add missing methods median(), quantile() summary() work (#520). Add missing cast methods (#522).","code":""},{"path":"https://haven.tidyverse.org/dev/news/index.html","id":"haven-230","dir":"Changelog","previous_headings":"","what":"haven 2.3.0","title":"haven 2.3.0","text":"CRAN release: 2020-05-24 labelled() gains necessary support work seemlessly dplyr 1.0.0, tidyr 1.0.0, packages use vctrs (@mikmart, #496). labelled() vectors now explicitly inherit corresponding base types (e.g. integer, double, character) (#509). ReadStat update, including read_sas() supports “” encoding (#482), fixes compiler warnings.","code":""},{"path":"https://haven.tidyverse.org/dev/news/index.html","id":"haven-220","dir":"Changelog","previous_headings":"","what":"haven 2.2.0","title":"haven 2.2.0","text":"CRAN release: 2019-11-08","code":""},{"path":"https://haven.tidyverse.org/dev/news/index.html","id":"partial-reading-2-2-0","dir":"Changelog","previous_headings":"","what":"Partial reading","title":"haven 2.2.0","text":"Thanks hard work @mikmart, read_*() functions gain three new arguments allow read part large file: col_select: selects columns read tidyselect interface (#248). skip: skips rows reading data (#370). n_max: limits number rows read. also brings deprecation: cols_only read_sas() deprecated favour new col_select argument.","code":""},{"path":"https://haven.tidyverse.org/dev/news/index.html","id":"minor-improvements-and-bug-fixes-2-2-0","dir":"Changelog","previous_headings":"","what":"Minor improvements and bug fixes","title":"haven 2.2.0","text":"as_factor() allows non-unique labels levels = \"label\". fixes particularly annoying printing bug (#424, @gergness) read_sas() now supports (|E|B)8601(DT|DA|TM) date/time formats (@mikmart). write_ functions gain .name_repair argument controls happens input dataset repeated column names (#436). write_ functions can now write labelled vectors NULL labels (#442). write_dta() can now write dataset labels label argument, defaults label attribute input data frame, present (@gorcha, #449). write_dta() works better Stata 15, thanks updated ReadStat (#461)","code":""},{"path":"https://haven.tidyverse.org/dev/news/index.html","id":"haven-211","dir":"Changelog","previous_headings":"","what":"haven 2.1.1","title":"haven 2.1.1","text":"CRAN release: 2019-07-04 Fixes R CMD check","code":""},{"path":"https://haven.tidyverse.org/dev/news/index.html","id":"haven-210","dir":"Changelog","previous_headings":"","what":"haven 2.1.0","title":"haven 2.1.0","text":"CRAN release: 2019-02-19","code":""},{"path":"https://haven.tidyverse.org/dev/news/index.html","id":"improved-labelling-2-1-0","dir":"Changelog","previous_headings":"","what":"Improved labelling","title":"haven 2.1.0","text":"labelled objects get pretty printing shows labels NA values inside tbl_df. Turn behaviour behavior using option(haven.show_pillar_labels = FALSE) (#340, @gergness). labelled() labelled_spss() now allow NULL labels. makes classes flexible, allowing use attributes (#219). labelled() tests value labels unique (@larmarange, #364)","code":""},{"path":"https://haven.tidyverse.org/dev/news/index.html","id":"minor-improvements-and-bug-fixes-2-1-0","dir":"Changelog","previous_headings":"","what":"Minor improvements and bug fixes","title":"haven 2.1.0","text":"as_factor(): faster input doesn’t contain missing values (@hughparsonage). Added labelled method backward compatbility (#414). data.frame method now correctly passes ... along (#407, @zkamvar). write_dta() now checks labelled values integers, values (#401). Updated latest ReadStat @evanmiller: read_por() can now read files SPSS 25 (#412) read_por() now uses base-30 instead base-10 exponent (#413) read_sas() can read zero column file (#420) read_sav() reads long strings (#381) read_sav() greater memory limit allowing read labels (#418) read_spss() reads long variable labels (#422) write_sav() longer creates incorrect column names >10k columns (#410) write_sav() longer crashes writing long label names (#395)","code":""},{"path":"https://haven.tidyverse.org/dev/news/index.html","id":"haven-200","dir":"Changelog","previous_headings":"","what":"haven 2.0.0","title":"haven 2.0.0","text":"CRAN release: 2018-11-21","code":""},{"path":"https://haven.tidyverse.org/dev/news/index.html","id":"breaking-changes-2-0-0","dir":"Changelog","previous_headings":"","what":"BREAKING CHANGES","title":"haven 2.0.0","text":"labelled() labelled_spss() now produce objects class “haven_labelled” “haven_labelled_spss”. Previously, “labelled” class name clashed labelled class defined Hmisc (#329). Unfortunately couldn’t come way fix problem except change class name; seems reasonable haven one change names given Hmisc around much longer. require changes packages use haven, shouldn’t affect user code.","code":""},{"path":"https://haven.tidyverse.org/dev/news/index.html","id":"minor-improvements-2-0-0","dir":"Changelog","previous_headings":"","what":"Minor improvements","title":"haven 2.0.0","text":"labelled() labelled_spss() now support adding label attribute resulting object. label short, human-readable description object, now also used printing, can easily removed using new zap_label() function. (#362, @huftis) Previously, label attribute supported reading writing SPSS files, possible actually create objects R label attribute using constructors labelled() labelled_spss().","code":""},{"path":"https://haven.tidyverse.org/dev/news/index.html","id":"haven-112","dir":"Changelog","previous_headings":"","what":"haven 1.1.2","title":"haven 1.1.2","text":"CRAN release: 2018-06-27 haven can read write non-ASCII paths R 3.5 (#371). labelled_spss objects preserve attributes subsetted (#360, @gergness). read_sav() gains encoding argument override encoding stored file (#305). read_sav() can now read .zsav files (#338). write_*() functions now invisibly return input data frame (documented) (#349, @austensen). write_dta() allows non-ASCII variable labels version 14 (#383). also uses less strict check integers labelled double containing integer values can written (#343). write_sav() produces .zsav files compress = TRUE (#338). write_xpt() can now set “member” name, defaults file name san extension (#328). Update latest readstat. Fixes memory error (#342) Now supports reading writing stata 15 files (#339) Negative integer labelled values tagged missing (#367) Fix as_factor() option levels=\"labels\" used tagged NAs (#340, @gergness)","code":""},{"path":"https://haven.tidyverse.org/dev/news/index.html","id":"haven-111","dir":"Changelog","previous_headings":"","what":"haven 1.1.1","title":"haven 1.1.1","text":"CRAN release: 2018-01-18 Update latest readstat. Includes: SPSS: empty charater columns now read character (#311) SPSS: now write long strings (#266) Stata: reorder labelled vectors write (#327) State: encoding now affects value labels (#325) SAS: can now write wide/long rows (#272, #335). SAS: can now handle Windows Vietnamese character set (#336) read_por() read_xpt() now correctly preserve attributes output needs reallocated (typical behaviour) (#313) read_sas() recognises date/times format trailing separator width specifications (#324) read_sas() gains catalog_encoding argument can independently specify encoding data catalog (#312) write_*() correctly measures lengths non-ASCII labels (#258): fixes cryptic error “provided string value longer available storage size specified column.” write_dta() now checks bad labels columns, just first (#326). write_sav() longer fails empty factors factors NA level (#301) writes metadata labelled_spss vectors (#334).","code":""},{"path":"https://haven.tidyverse.org/dev/news/index.html","id":"haven-110","dir":"Changelog","previous_headings":"","what":"haven 1.1.0","title":"haven 1.1.0","text":"CRAN release: 2017-07-09 Update latest readstat. Includes: SAS: support Win baltic code page (#231) SAS: better error messages instead crashes (#234, #270) SAS: fix “unable read error” (#271) SPSS: support uppercase time stamps (#230) SPSS: fixes 252-255 byte strings (#226) SPSS: fixes 0 byte strings (#245) Share as_factor() forcats package (#256) read_sav() correctly returns system defined missings NA (rather NaN) (#223). read_sav() write_sav() preserve SPSS’s display widths (@ecortens). read_sas() gains experimental cols_only argument read specified columns (#248). tibbles created tibble::as_tibble(), rather “hand” (#229). write_sav() checks factors don’t levels >120 characters (#262) write_dta() longer checks value labels 32 characters (since restriction dta files) (#239). write methds now check ’re trying write data frame (#287). Add support reading (read_xpt()) writing (write_xpt()) SAS transport files. write_* functions turn ordered factors labelled vectors (#285)","code":""},{"path":"https://haven.tidyverse.org/dev/news/index.html","id":"haven-100","dir":"Changelog","previous_headings":"","what":"haven 1.0.0","title":"haven 1.0.0","text":"CRAN release: 2016-09-23 ReadStat library stored subdirectory src (#209, @krlmlr). Import tibble tibbles printed consistently (#154, @krlmlr). Update latest ReadStat (#65). Includes: Support binary (aka Ross) compression SAS (#31). Support extended ASCII encoding Stata (#71). Support Stata 14 files (#75, #212). Support SPSS value labels 8 characters (#157). likely get error attempting create invalid output file (#171). Added support reading writing variable formats. Similarly variable labels, formats stored attribute vector. Use zap_formats() want remove attributes. (@gorcha, #119, #123). Added support reading file “label” “notes”. currently printed, stored attributes need access (#186). Added support “tagged” missing values (Stata called “extended” SAS called “special”) carry extra byte information: character label “” “z”. downside change integer columns now converted doubles, support encoding tag payload NaN. New labelled_spss() subclass labelled() can model user missing values SPSS. can either set distinct values, numeric vectors, range. zap_labels() strips labels, replaces user-defined missing values NA. New zap_missing() just replaces user-defined missing values NA. labelled_spss() potentially dangerous work R base functions don’t know labelled_spss() functions return wrong result presence user-defined missing values. reason, created read_spss() user_na = TRUE (normally user-defined missings converted NA). as_factor() longer drops label attribute (variable label) used (#177, @itsdalmo). Using as_factor() levels = \"default levels = \"\" preserves unused labels (implicit missing) converting (#172, @itsdalmo). Labels (resulting factor levels) always sorted values. as_factor() gains new levels = \"default\" mechanism. uses labels present, otherwise uses labels. now default, seems map better semantics labelled values statistical packages (#81). can also use levels = \"\" combine value label single string (#82). also gains method data frames, can easily convert every labelled column factor one function call. New vignette(\"semantics\", package = \"haven\") discusses semantics missing values labelling SAS, SPSS, Stata, translated R. Support hms() moved hms package (#162). Time varibles now class c(\"hms\", \"difftime\") units attribute value “secs” (#162). labelled() less strict checks: can mix double integer value labels (#86, #110, @lionel-), .labelled() now exported (#124). Putting labelled vector data frame now generates correct column name (#193). read_dta() now recognises “%d” custom date types (#80, #130). also gains encoding parameter can use override default encoding. particularly useful Stata 13 store encoding used file (#163). read_por() now actually works (#35). read_sav() now correctly recognises EDATE JDATE formats dates (#72). Variables format DATE, ADATE, EDATE, JDATE SDATE imported Date variables instead POSIXct. can now set user_na = TRUE preserve user defined missing values: given class labelled_spss. read_dta(), read_sas(), read_sav() better test missing string values (#79). can read connections compressed files (@lionel-, #109) read_sas() gains encoding parameter overide encoding stored file incorrect (#176). gets better argument names (#214). Added type_sum() method labelled objects print nicely tibbles. write_dta() now verifies variable names valid Stata variables (#132), throws error attempt save labelled vector integer (#144). can choose version Stata’s file format output (#217). New write_sas() allows write data frames sas7bdat files. still somewhat experimental. write_sav() writes hms variables SPSS time variables, “measure” type set variable (#133). write_dta() write_sav() support writing date date/times (#25, #139, #145). Labelled values always converted UTF-8 written (#87). Infinite values now converted missing values since SPSS Stata don’t support (#149). use better test missing values (#70). zap_labels() completely overhauled. now works (@markriseley, #69), drops label attributes; longer replaces labelled values NAs. also gains data frame method zaps labels every column. print.labelled() print.labelled_spss() now display type.","code":""},{"path":"https://haven.tidyverse.org/dev/news/index.html","id":"haven-020","dir":"Changelog","previous_headings":"","what":"haven 0.2.0","title":"haven 0.2.0","text":"CRAN release: 2015-04-09 fixed bug as_factor.labelled, generated ’s wrong labels integer labels. zap_labels() now leaves unlabelled vectors unchanged, making easier apply columns. write_dta() write_sav() take care always write output UTF-8 (#36) write_dta() write_sav() won’t crash give invalid paths, can now use ~ refer home directory (#37). Byte variables now correctly read integers (strings, #45), missing values captured correctly (#43). Added read_stata() alias read_dta() (#52). read_spss() uses extension automatically choose read_sav() read_por() (#53) Updates ReadStat. Including fixes various parsing bugs, encodings, better support large files. hms objects deal better missings printing. Fixed bug causing labels numeric variables read integers associated error: Error: `x` `labels` must type","code":""},{"path":"https://haven.tidyverse.org/dev/news/index.html","id":"haven-011","dir":"Changelog","previous_headings":"","what":"haven 0.1.1","title":"haven 0.1.1","text":"CRAN release: 2015-03-03 Fixed memory initialisation problems found valgrind.","code":""}]
